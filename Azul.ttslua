function onLoad()
    print ('Started :-)')
    startToken = getObjectFromGUID('71bd9b')
    if startToken then startToken.setName('Start token') end
    gameTable = getObjectFromGUID('52fa59')
    tilePool = getObjectFromGUID('d101ec')
    discards = getObjectFromGUID('c30f7d')
    tilePoolDiam = 8.3
    colors = {'Red', 'Yellow', 'White', 'Black', 'Blue',
            Red=true, Yellow=true, White=true, Black=true, Blue=true }
    card_guids = {'18a461', '9f42ee', '8259b9', '4b40cd'}
    cardx = getObjectFromGUID('18a461')
    zoneEnabled = {}
    followerZones = {}  -- tiles leaving these zones will take same-color tiles with them
    placementRowSpacing = 9.25/4 -- horiz spacing of supply rows
    -- printPosition(cardx.getPosition())
    -- cardx.setPosition({12,4.53,12})
    card1 = {pos = Vector(-46.45, 8.0, -26.85), rotation = 0, center={-34.4, 4.53, -15}}
    card2 = {pos = Vector(22.32, 8.0, -26.85), rotation = 0, center={34.4, 4.53, -15}}
    card3 = {pos = Vector(46.45, 8.0, 26.88), rotation = 180, center={34.4, 4.53, 15}}
    card4 = {pos = Vector(-22.4, 8.0, 26.88), rotation = 180, center={-34.4, 4.53, 15}}
    factory = getObjectFromGUID('8d86bf')
    tilePool.createButton({label='Distribute', click_function='drawTiles', height=1000, width=1500, font_size=250, color='Green',
            font_color={1,1,1}, position={2,0.3,2}})
    -- get number of players
    refreshSupply()
    removeExtraFactories()
    doSetup = false
    if doSetup then
        UI.setAttribute('PlayerNum', 'active', true)
        Wait.condition(finishSetup, function() return playersN ~= nil end)
    end
end

function finishSetup()
    assert(playersN>1 and playersN<5)
    placeFactories(playersN)
    drawTiles()
    eraseScriptingZones()
    createFactoryZones()
    createCenterZone()
    createCardScriptingZones()
    createCardGrids()
    placeSnaps()
end

Frame = 0
function onUpdate()
    --disableRestingFollowerGroups()
    updateAllFollowerGroups()
    Frame = Frame + 1
end

function disableRestingFollowerGroups()
    for _, fg in ipairs(AllFollowerGroups) do
        if fg.target.resting then
            print('Resting')
        end
    end
end

function setPlayerCount(x,n)
    playersN = tonumber(n)
    UI.setAttribute('PlayerNum', 'active', false)
end

function onObjectDrop(_, obj)
    local p = obj.getPosition()
    local p2 = cardx.positionToLocal(p)
    printPosition(p, 'world')
    --printPosition(p2, 'local')
end

function placeFactories(playersN)
    local fHeight = 4.5
    local count = ({5,5,7,9})[playersN]
    local radiusForplayersN = {12,14,14,15}
    local centerRadius = radiusForplayersN[playersN]
    factoryPos = Polygon:new({sides=count, radius=centerRadius, center=Vector(0, fHeight, 0)}).points -- global
    local factories = {factory}
    for i, p in ipairs(factoryPos) do
        if i == 1 then
            --printPosition(p, 'factoryPos[1]')
            factory.setPosition(p)
            f = factory
        else
            f = factory.clone({position=p})
            f.setPosition(p)
            table.insert(factories, f)
        end
        f.setLock(true)
        f.setName('Factory ' .. i)
    end
end

function createCardGrids()
    -- coordinates are all local, relative to a card
    placementGrid=TriangularGrid:new({origin=Vector(1.2,0,-1.87), spacing=Vector(1.6, 0, 1.62), rows=5})
    patternGrid=Grid:new({origin=Vector(-7.5, 0, -1.87), spacing=Vector(1.58, 0, 1.62), rows=5, cols=5})
    floorGrid = Grid:new({origin=Vector(-2.8, 0, 7.35), spacing=Vector(1.73, 0, 1.62), rows=1, cols=7})
    scoringGrid = Grid:new({origin=Vector(-7.8,0,-7.64), spacing=Vector(0.82, 0, 1.0), rows=5, cols=20})
end

function placeSnaps()  -- do it for each card
    for _, guid in ipairs(card_guids) do
        local card = getObjectFromGUID(guid)
        placeSnapsOnCard(card)
    end
end


function placeSnapsOnCard(card)  --
    placeSnapsOnLocalPoints(card, placementGrid:generatePointsFlat())
    placeSnapsOnLocalPoints(card, patternGrid:generatePointsFlat())
    placeSnapsOnLocalPoints(card, floorGrid:generatePointsFlat())
end

function placeSnapsOnLocalPoints(object,points)
    local sPoints = {}
    for _,p in ipairs(points) do
        table.insert(sPoints, {position=p, rotation = {0,0,0}, rotation_snap = false} )
    end
    object.setSnapPoints(sPoints)
end

function drawTiles()
    if #getUnplayedTiles() > 0 then
        broadcastToAll('Play all the tiles first', 'Red')
        return
    end
    local requiredTiles = #factoryPos * 4
    if countItemsInBag(tilePool) < requiredTiles then
        local totalTiles = countItemsInBag(tilePool) + countItemsInBag(discards)
        transferBags(discards, tilePool, 0.02) -- put the discards into the pool again
        print('Waiting')
        -- Wait.condition(function() distributeTiles() end,
        --                --function() return waitUntilFull(totalTiles) end,
        --                function() return (waitUntilFull(totalTiles)) end,
        --                2,
        --                function() print ('Error - discards bag has not emptied, try manually') end)

        Wait.time(function() distributeTiles() end, 2)
        broadcastToAll('Shuffling ...', 'Green')
        -- the condition function doesn't work ... something to do with counting while transferring
        -- objects or ??? so we'll just have to use a time delay; might be able to rig up something
        -- with a coroutine, check frame by frame, but ...
    else
        distributeTiles()
    end
end

function removeExtraFactories()
    local all = filterTable(getAllObjects(), function(k,v) return v.tag=='Chip' end)
    print('there are ', #all, ' factories')
    for _, f in ipairs(all) do
        if f ~= factory then f.destruct() end
    end
end

function refreshSupply() -- ensure that bag has exactly 20 of each tile
    assert(countItemsInBag(discards)==0, 'Run at start of game when discards bag is empty.')
    local tp = tilePool.getObjects()
    local groups = {}
    local count
    for _,color in ipairs(colors) do
        groups[color] = filterTable(tp, function(k,v) return v.name == color end)
        count = #groups[color]
        print(color, '=>',count)
        if count < 20 then
            spawnTiles(color, 20-count)
        else
            removeTiles(color, count-20, groups)
        end
    end
    local extraStuff = filterTable(tp, function(k,v) return not colors[v.name]  end)  -- get stuff that isn't a tile
    for i, stuff in ipairs(extraStuff) do
        print ('taking ', i, '=', stuff.guid)
        tilePool.takeObject({guid=stuff.guid, position=Vector(-20+4*i, 10, 0)})
    end
end

tileSpawnParams = {
Black = {mesh = 'http://cloud-3.steamusercontent.com/ugc/967597347419272565/8326F0A89AEAEE089C4059C5BE828F0B551B3638/',
        diffuse = 'http://cloud-3.steamusercontent.com/ugc/967597347419273056/A03D249CF12867EB4134A9A7E9A9D2A1632EE704/',
        collider = 'http://cloud-3.steamusercontent.com/ugc/967597347419272763/6C18A0AD09F4080D1AF5C84E41AA8F8E1373F6C0/',
        spectral_intensity = 0.5, specular_sharpness = 7, fresnel_strength = 0.4, type=1, material=0,
    },
Yellow =   {mesh = 'http://cloud-3.steamusercontent.com/ugc/967597347419272565/8326F0A89AEAEE089C4059C5BE828F0B551B3638/',
        diffuse = 'http://cloud-3.steamusercontent.com/ugc/967597347416754435/BA4334969D1AD4E8B146AE7E7A1A430F14C7A5DA/',
        collider = 'http://cloud-3.steamusercontent.com/ugc/967597347419272763/6C18A0AD09F4080D1AF5C84E41AA8F8E1373F6C0/',
        spectral_intensity = 0.5, specular_sharpness = 7, fresnel_strength = 0.4, type=1, material=0,
    },
White =   {mesh = 'http://cloud-3.steamusercontent.com/ugc/967597347419272565/8326F0A89AEAEE089C4059C5BE828F0B551B3638/',
        diffuse = 'http://cloud-3.steamusercontent.com/ugc/967597347419272946/C8F005A109AAD820E38A8E377F1026074B830401/',
        collider = 'http://cloud-3.steamusercontent.com/ugc/967597347419272763/6C18A0AD09F4080D1AF5C84E41AA8F8E1373F6C0/',
        spectral_intensity = 0.5, specular_sharpness = 7, fresnel_strength = 0.4, type=1, material=0,
    },

Red =   {mesh = 'http://cloud-3.steamusercontent.com/ugc/967597347419272565/8326F0A89AEAEE089C4059C5BE828F0B551B3638/',
        diffuse = 'http://cloud-3.steamusercontent.com/ugc/967597347419272641/EE644ECD0ADC6C78AC61E0C538BAF98FD8703908/',
        collider = 'http://cloud-3.steamusercontent.com/ugc/967597347419272763/6C18A0AD09F4080D1AF5C84E41AA8F8E1373F6C0/',
        spectral_intensity = 0.5, specular_sharpness = 7, fresnel_strength = 0.4, type=1, material=0,
    },

Blue =   {mesh = 'http://cloud-3.steamusercontent.com/ugc/967597347419272565/8326F0A89AEAEE089C4059C5BE828F0B551B3638/',
        diffuse = 'http://cloud-3.steamusercontent.com/ugc/967597347419272833/D4C93372171EBA7604524C0E6B6DA29347B5209A/',
        collider = 'http://cloud-3.steamusercontent.com/ugc/967597347419272763/6C18A0AD09F4080D1AF5C84E41AA8F8E1373F6C0/',
        spectral_intensity = 0.5, specular_sharpness = 7, fresnel_strength = 0.4, type=1, material=0,
    }
}
function spawnTiles(color, count)
    print('spawning ', count, ' ', color, ' tiles.')
    local params={
     type='Custom_Model',
     position=Vector(17,7,-22),
     rotation={0,0,0},
     scale={1,1,1},
     callback_function = function(obj) tilePool.putObject(obj) end,
    }
    for i=1,count do
        obj = spawnObject(params)
        obj.setCustomObject(tileSpawnParams[color])
        obj.setName(color)
        -- Wait.time(function() tilePool.putObject(obj); print('Sent'); end, 0.2)
    end
end

function removeTiles(color, count, objList)
    if count < 1 then return end
    print('removing ', count, ' ', color, ' tiles.')
    local params = {
        smooth = false,
        callback_function = function(obj) obj.destroy()  end,
      }
    local objs = objList[color]
    for i=1, count do
        params.position = (Vector(-25+2.2*i, -7, -20))
        params.guid = objs[i].guid
        tilePool.takeObject(params)
    end
end


-- function waitUntilFull(n)
--     print ('wUF start')
--     --count = countItemsInBag(tilePool)
--     count = count + 1
--     print('wUF n=', n or 'nil')
--     --if true then return false end
--     if count >= n then
--         print('++', count)
--         return false
--     else
--         print("... ", count )
--         return true
--     end
-- end

function distributeTiles()  -- actually spread them out
    -- done after we have refilled the tilePool if needed
    local params = {
        smooth = true,
        callback_function = function(obj)  end,
      }
    local offsets={{1.5,1,1.5}, {-1.5,2,1.5}, {1.5,3,-1.5}, {-1.5,4,-1.5}}
    distributing = true -- global, on while distributing to avoid action on entering/leaving scripting zones
    tilePool.shuffle()
    tilePool.shuffle()
    local numberToDistribute = math.min(countItemsInBag(tilePool), #factoryPos*4)
    local distributed = 0
    for f = 1, #factoryPos do
        local base = factoryPos[f]
        for i=1,4 do
            if distributed < numberToDistribute then
                params.position = base + Vector(offsets[i])
                params.rotation = {math.random(25), math.random(90), math.random(15)}
                params.rotation = Vector(0,0,0)
                tilePool.takeObject(params)
                distributed = distributed + 1
            end
        end
    end
    startToken.setPositionSmooth(Vector(0,0,0))
    Wait.time(function() distributing = false end, 3.0)
end

function createFactoryZones()
    local params = {
        type = 'ScriptingTrigger',
        rotation = Vector(0,0, 0),
        scale = {x=tilePoolDiam*0.9, y=3, z=tilePoolDiam*0.9},
        callback_function = function(obj)  end,
        }
    local thisZone
    for i, p in ipairs(factoryPos) do
        params.position = p
        thisZone = spawnObject(params)
        thisZone.setName('Factory Zone' .. i)
        zoneEnabled[thisZone] = true
        followerZones[thisZone] = true
    end
end

function createCenterZone()
    local positioning={{position = Vector(1,4,0), scale = Vector(15,3,14)},
                 {position = Vector(0,4,0), scale = Vector(14,3,13)},
                 {position = Vector(-1,4,0), scale = Vector(15,3,14)} }
    local params = {
        type = 'ScriptingTrigger',
        position = positioning[playersN-1].position,
        scale = positioning[playersN-1].scale,
        callback_function = function(obj)  end,
        }
    --pdump(params,'params')
    local thisZone = spawnObject(params)
    thisZone.setName('Center Zone')
    zoneEnabled[thisZone] = true
    followerZones[thisZone] = true
end

function createCardScriptingZones()
    local position = Vector(4.4, 0, 1.33)
    cxPos = cardx.getPosition()  -- global for debugging/testing
    local params = {
        type = 'ScriptingTrigger',
        position = cardx.positionToWorld(position),
        scale = Vector(11.2,3,11.2),
        callback_function = function(obj)  end,
        }
    for i, cardGUID in ipairs(card_guids) do
        params.position = getObjectFromGUID(cardGUID).positionToWorld(position)
        local thisZone = spawnObject(params)
        thisZone.setName('Card ' .. i)
        zoneEnabled[thisZone] = false
    end
end

function eraseScriptingZones()
    local allobj = getAllObjects() -- global object
    for _, o in ipairs(allobj) do
        if (o.tag == 'Scripting') then o.destruct() end
    end
end

-- WHEN TILES ARE PICKED UP --------------------

function onObjectLeaveScriptingZone(zone, obj)
    -- the whole purpose of this is to pull all tiles of the same color into a FollowerGroup
    if distributing or not zoneEnabled[zone] or not followerZones[zone] then return nil end
    if not isTile(obj) then return end
    -- line up other tiles of same color
    --print(obj.getName(), ' leaving zone')
    obj.setRotation(Vector(0,0,0))
    obj.highlightOn('Red')
    local color = obj.getName()
    -- print(#zone.getObjects())
    local zoneObj = zone.getObjects()
    -- for _,o in ipairs(zoneObj) do
    --     print(o.tag, '/', o.getName(), '/', o.getGUID() )
    -- end
    local others = filterTable(zone.getObjects(),
            function(_,o) return o.getName()==color end)
    --pdump(others,'others')
    for _,o in ipairs(others) do
        o.setRotation(Vector(0,0,0))
    end
    zoneEnabled[zone] = false
    local fg = FollowerGroup:new({target=obj, followers=others, spacing=Vector(placementRowSpacing, 0, 0)})
    --table.insert(AllFollowerGroups,fg)
    --print('onLeaving, just added, afg=', afg, '--------')
    Wait.time(function() zoneEnabled[zone]=true end, 1.0)  -- so followers don't trigger same thing
end

function isTile(obj)
    local name=obj.getName()
    --print('name=',name, ', tag=', obj.tag or 'nil   ')
    return obj.tag=='Figurine' and
        (name=='Red' or name=='Yellow' or name=='Black' or name=='White' or name=='Blue')
end

function onObjectEnterScriptingZone(zone, obj)
    if not ( isTile(obj)) then return end
    local afg = AllFollowerGroups
    --print('obj ', obj.getGUID(), '-', obj.getName(), ' entering ', zone.getName())
    if AllFollowerGroups.objects[obj] == 't' then  -- this is a target/leader of a follower group
        FollowerGroup.removeFromAllFollowerGroups(obj) -- break FollowerGroup
    end
    obj.highlightOff()
    obj.setRotation(Vector(0,0,0))
end
----------=========== CHECKING TILES IN THE CENTER ===============
function getUnplayedTiles()
    return getCast(Vector(0,5,0),  32)
end

function getCast(pos, radius)
    --print ('radius=', fmt2(radius))
    params = {
        origin       = Vector(pos),
        direction    = {0,1,0},
        type         = 2,
        size         = {radius, radius, radius},
        max_distance = 0,
        debug        = false,
    }
    hitList = Physics.cast(params)
    local objList = {}
--    pdump(hitlist)
    for _,h in ipairs(hitList) do
        local obj = h.hit_object
        if obj ~= gameTable and obj.tag == 'Figurine' then
            --print (obj.tag, '-', obj.getName())
--            obj.highlightOn('Green')
            table.insert(objList,obj)
        end
    end
    --print('Found ', #objList, ' objects.')
    return objList
end

function onScriptingButtonDown(index, player_color)  -- testing
    print('Pressed button ', index)
     if tostring(index) == '1' then removeExtraFactories() end
     if tostring(index) == '2' then refreshSupply() end
    -- if tostring(index) == '3' then emptyBag(discards) end
    -- if tostring(index) == '4' then transferBags(discards, tilePool, 0.02) end
end


------======= POSITIONING INFORMATION ========
-- Cardx (lower left card) position (center of card from center of table) is (-34.4, 4.53, -15)
-- NB: Card coordinate axes are rotated 180 degrees from the normal card orientation.
--     positive x and y are toward lower left of card
-- Lower corner is at (-12, -12) in world units *** relative to card center ***
--          but    at (8.2, 8.2) in card units.
-- Card scale is 1.45
-- Card y-axis rotation of lower-left card is 180. Rotation of "top" cards,
-- those in same row as the supply bag, is 0.
-- INITIAL PLACEMENT/SUPPLY ROWS
-- Center of supply rows is leftmost square in 3rd row, local (4.4, 0, 1.33)
-- Top supply row square is local (1.20, , -1.87)
-- Lower left row square is local (7.6,, 4.6)
-- Spacing = {1.6, 0, 1.62}
-- GRID WHERE TILES ARE FINALLY PLACED AND SCORED
-- Upper right =  {-7.5, 0.0, -1.87}
-- Lower left = {-1.18, 0.0, 4.6}
-- Spacing =  {1.58, 0, 1.62}
-- FLOOR ROW Where overflow tiles go
-- {-2.8, 0.0, 7.35} to {7.55, 0.0, 7.35}
-- Spacing = (1.73,0,0)
-- SCORING SECTION
-- The 20 square (upper right) is (-7.8, , -7.64)
-- The 81 square (lower left) is (7.77, -3.58)
-- Spacing = (0.82,0, 1.0)
--
-- ORIGINAL PROGRAM PLACEMENT OF MAGNETS
--     -- PLACEMENT ROW ======== —
--
--     -- initial tile row 1
--     { position = {0, 0.0, 0}, rotation = {0,0,0}, rotation_snap = true },
--
--     { position = {1.2, 0.0, -1.87}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {2.8, 0.0, -1.87}, rotation = {0,0,0}, rotation_snap = true },
--
--     -- initial tile row 2
--     { position = {1.2, 0.0, -0.3}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {2.8, 0.0, -0.3}, rotation = {0,0,0}, rotation_snap = true },
--
--     -- initial tile row 3
--     { position = {1.2, 0.0, 1.33}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {2.8, 0.0, 1.33}, rotation = {0,0,0}, rotation_snap = true },
--     NB: { position = {4.4, 0.0, 1.33}, rotation = {0,0,0}, rotation_snap = true }, -- this is center of supply area
--
--     -- initial tile row 4
--     { position = {1.2, 0.0, 2.97}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {2.8, 0.0, 2.97}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {4.4, 0.0, 2.97}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {6.0, 0.0, 2.97}, rotation = {0,0,0}, rotation_snap = true },
--
--     -- initial tile row 5
--     { position = {1.2, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {2.8, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {4.4, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {6.0, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {7.6, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },
--
--
--     -- GRID ======== —
--
--     -- grid row one
--     NB: { position = {-1.20, 0.0, -1.87}, rotation = {0,0,0}, rotation_snap = true }, -- upper right matrix corner
--     { position = {-2.77, 0.0, -1.87}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-4.34, 0.0, -1.87}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-5.91, 0.0, -1.87}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-7.48, 0.0, -1.87}, rotation = {0,0,0}, rotation_snap = true },
--
--     -- grid row two
--     { position = {-1.20, 0.0, -0.3}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-2.77, 0.0, -0.3}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-4.34, 0.0, -0.3}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-5.91, 0.0, -0.3}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-7.48, 0.0, -0.3}, rotation = {0,0,0}, rotation_snap = true },
--
--     -- grid row three
--     { position = {-1.20, 0.0, 1.33}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-2.77, 0.0, 1.33}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-4.34, 0.0, 1.33}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-5.91, 0.0, 1.33}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-7.48, 0.0, 1.33}, rotation = {0,0,0}, rotation_snap = true },
--
--     -- grid row four
--     { position = {-1.20, 0.0, 2.97}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-2.77, 0.0, 2.97}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-4.34, 0.0, 2.97}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-5.91, 0.0, 2.97}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-7.48, 0.0, 2.97}, rotation = {0,0,0}, rotation_snap = true },
--
--     -- grid row four
--     NB: { position = {-1.20, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },  -- lower left
--     { position = {-2.77, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-4.34, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-5.91, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-7.48, 0.0, 4.6}, rotation = {0,0,0}, rotation_snap = true },
--
--
--     -- BROKEN TILES ======== —
--
--     { position = {7.55, 0.0, 7.35}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {5.825, 0.0, 7.35}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {4.1, 0.0, 7.35}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {2.375, 0.0, 7.35}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {0.65, 0.0, 7.35}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-1.075, 0.0, 7.35}, rotation = {0,0,0}, rotation_snap = true },
--     { position = {-2.8, 0.0, 7.35}, rotation = {0,0,0}, rotation_snap = true },
-- })
